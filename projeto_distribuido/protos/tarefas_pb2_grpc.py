# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from projeto_distribuido.protos import tarefas_pb2 as projeto__distribuido_dot_protos_dot_tarefas__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in projeto_distribuido/protos/tarefas_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TaskOrchestratorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitTask = channel.unary_unary(
                '/tarefas.TaskOrchestrator/SubmitTask',
                request_serializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.TaskRequest.SerializeToString,
                response_deserializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.TaskResponse.FromString,
                _registered_method=True)
        self.CheckTaskStatus = channel.unary_unary(
                '/tarefas.TaskOrchestrator/CheckTaskStatus',
                request_serializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.StatusRequest.SerializeToString,
                response_deserializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.StatusResponse.FromString,
                _registered_method=True)


class TaskOrchestratorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubmitTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckTaskStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskOrchestratorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitTask': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitTask,
                    request_deserializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.TaskRequest.FromString,
                    response_serializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.TaskResponse.SerializeToString,
            ),
            'CheckTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckTaskStatus,
                    request_deserializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.StatusRequest.FromString,
                    response_serializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tarefas.TaskOrchestrator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tarefas.TaskOrchestrator', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TaskOrchestrator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubmitTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tarefas.TaskOrchestrator/SubmitTask',
            projeto__distribuido_dot_protos_dot_tarefas__pb2.TaskRequest.SerializeToString,
            projeto__distribuido_dot_protos_dot_tarefas__pb2.TaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tarefas.TaskOrchestrator/CheckTaskStatus',
            projeto__distribuido_dot_protos_dot_tarefas__pb2.StatusRequest.SerializeToString,
            projeto__distribuido_dot_protos_dot_tarefas__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class WorkerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendHeartbeat = channel.unary_unary(
                '/tarefas.WorkerService/SendHeartbeat',
                request_serializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.HeartbeatResponse.FromString,
                _registered_method=True)


class WorkerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.SendHeartbeat,
                    request_deserializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.HeartbeatRequest.FromString,
                    response_serializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.HeartbeatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tarefas.WorkerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tarefas.WorkerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WorkerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tarefas.WorkerService/SendHeartbeat',
            projeto__distribuido_dot_protos_dot_tarefas__pb2.HeartbeatRequest.SerializeToString,
            projeto__distribuido_dot_protos_dot_tarefas__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SynchronizationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateState = channel.unary_unary(
                '/tarefas.SynchronizationService/UpdateState',
                request_serializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.StateUpdateRequest.SerializeToString,
                response_deserializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.StateUpdateResponse.FromString,
                _registered_method=True)
        self.PrimaryHeartbeat = channel.unary_unary(
                '/tarefas.SynchronizationService/PrimaryHeartbeat',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class SynchronizationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UpdateState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrimaryHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SynchronizationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateState': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateState,
                    request_deserializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.StateUpdateRequest.FromString,
                    response_serializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.StateUpdateResponse.SerializeToString,
            ),
            'PrimaryHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.PrimaryHeartbeat,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tarefas.SynchronizationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tarefas.SynchronizationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SynchronizationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UpdateState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tarefas.SynchronizationService/UpdateState',
            projeto__distribuido_dot_protos_dot_tarefas__pb2.StateUpdateRequest.SerializeToString,
            projeto__distribuido_dot_protos_dot_tarefas__pb2.StateUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PrimaryHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tarefas.SynchronizationService/PrimaryHeartbeat',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class WorkerNodeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteTask = channel.unary_unary(
                '/tarefas.WorkerNodeService/ExecuteTask',
                request_serializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.ExecuteTaskRequest.SerializeToString,
                response_deserializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.ExecuteTaskResponse.FromString,
                _registered_method=True)


class WorkerNodeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExecuteTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkerNodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteTask': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteTask,
                    request_deserializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.ExecuteTaskRequest.FromString,
                    response_serializer=projeto__distribuido_dot_protos_dot_tarefas__pb2.ExecuteTaskResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tarefas.WorkerNodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tarefas.WorkerNodeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WorkerNodeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExecuteTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tarefas.WorkerNodeService/ExecuteTask',
            projeto__distribuido_dot_protos_dot_tarefas__pb2.ExecuteTaskRequest.SerializeToString,
            projeto__distribuido_dot_protos_dot_tarefas__pb2.ExecuteTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
